/* ================= 
    Custom Properties
===================*/
:root {
  --clr-dark: 230 35% 7%;
  --clr-light: 231 77% 90%;
  --clr-white: 0 0% 100%;
}

/* ================= 
    Resets
===================*/

/* https://andy-bell.co.uk/a-modern-css-reset/ - Andy Bell's Reset(inspiration for reset) */
/* box-sizing */
*,
*::before,
*::after {
  box-sizing: border-box;
}
/* margin reset */
body,
h1,
h2,
h3,
h4,
h5,
p,
figure,
picture,
ul {
  margin: 0;
}

/* set up the body */
body {
  line-height: 1.5; /*browser default is 1.4/1.5*/
  min-height: 100vh; /*all the pages are bigger in size and avoid smaller pages on the display and never allow website size to go smaller*/
}

/* make images easier to work with */
img,
picture {
  /* shrink images as per screen size but never allow images to grow beyond its original size */
  max-width: 100%;
  /* remove the space below image which appears since images are inline by default */
  display: block;
}
/* make form elements easier to work with */
input,
button,
select,
textarea {
  /* form elements don't inherit font by default */
  font: inherit;
}

/* Remove all animations, transitions  for people that prefer not to see them 
this is important for accessibility reasons because for some people animations make them feel sick and 
they turn off animation in their browser/OS so remove animation from your site for those people who have chosen
to turn off animation in their website*/
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* ================= 
    Utility Classes
===================*/
.flex {
  display: flex;
  gap: var(--gap, 1rem);
}
.grid {
  display: grid;
  gap: var(--gap, 1rem);
}
.container {
  padding-inline: 2em;
  max-width: 80rem;
  margin-inline: auto;
}

/*for accessibility: to visually hide the element
screen readers can read the text inside the element but visually it will be hidden
read out the element to provide context to the listeners about the element*/
.sr-only {
  /* can't use display:none to hide elements because it will take the element out of the 
  DOM, this class and properties/style keeps the element inside the DOM and accessible to 
  screen reader while visually hides the element */
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

.box {
  background: lightblue;
  padding: 3rem;
}

.cta {
  /* changing/setting value of --gap variable for .flex/.grid from here */
  /* --gap: 5rem; */
  background: pink;
  border: 2px solid red;
  padding: 2rem;
}
/* colors */
.bg-dark {
  background: hsl(var(--clr-dark));
}
.bg-accent {
  background: hsl(var(--clr-light));
}
.bg-white {
  background: hsl(var(--clr-white));
}
.text-dark {
  color: hsl(var(--clr-dark));
}
.text-accent {
  color: hsl(var(--clr-light));
}
.text-white {
  color: hsl(var(--clr-white));
}
.example-component {
  background: hsl(var(--clr-light) / 0.2);
  width: 100%;
}
#colors p > span {
  display: inline-block;
  margin-right: 3rem;
}
