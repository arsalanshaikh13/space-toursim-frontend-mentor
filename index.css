/* =================
    Custom Properties
===================*/
:root {
  /* colors */
  --clr-dark: 230 35% 7%;
  --clr-light: 231 77% 90%;
  --clr-white: 0 0% 100%;

  /* font-sizes */
  /* px values overwrites the default settings of the browsers
  and if the user has changed their default settings for font-sizes intheir
  browsers then px will values will overwrite them and make the site appear different
  than it should be
  rem works on the default browser font-size settings so it won't overwrite
  default/changed browser settings nd make the site appear as designed
  with things appearing big/small as they were designed in predictable ways */
  --fs-900: clamp(5rem, 8vw + 1rem, 9.375rem);
  --fs-800: 3.5rem;
  --fs-700: 1.75rem;
  --fs-600: 1.5rem;
  --fs-500: 1.25rem;
  --fs-400: 1rem;
  --fs-300: 0.9375rem;
  --fs-200: 0.875rem;

  /* font-families */
  --ff-serif: "Bellefair", serif;
  --ff-sans-cond: "Barlow Condensed", sans-serif;
  --ff-sans-normal: "Barlow", sans-serif;
}
@media (min-width: 35em) {
  :root {
    --fs-800: 5rem;
    --fs-700: 2.5rem;
    --fs-600: 1.75rem;
    --fs-500: 1.25rem;
    --fs-400: 1rem;
    /* setting/changing this value only for h2 tag in article header of technology page */
    --fs-200: 0.875rem;
  }
}
@media (min-width: 45em) {
  :root {
    --fs-800: 6.25rem;
    --fs-700: 3.5rem;
    --fs-600: 2rem;
    --fs-500: 1.75rem;
    --fs-400: 1.125rem;
    --fs-300: 1rem;
    --fs-200: 0.875rem;
  }
}

/* =================
    Resets
===================*/

/* https://andy-bell.co.uk/a-modern-css-reset/ - Andy Bell's Reset(inspiration for reset) */
/* box-sizing */
*,
*::before,
*::after {
  box-sizing: border-box;
}
/* margin reset */
body,
h1,
h2,
h3,
h4,
h5,
p,
figure,
picture,
ul {
  margin: 0;
}
h1,
h2,
h3,
h4,
h5,
h6,
p {
  /* since we have only imported 400-regular font-weight from google
  so put that on each heading/paragraph as design requires */
  font-weight: 400;
}

/* set up the body */
body {
  font-family: var(--ff-sans-normal);
  font-size: var(--fs-400);
  color: hsl(var(--clr-white));
  background: hsl(var(--clr-dark));
  /* by default line-height is 1.1/1.2, wcag specification says put line-height: 1.5; for accesibility and better readability reason for users who can't read smaller text*/
  /* https://developer.mozilla.org/en-US/docs/Web/CSS/line-height#accessibility_concerns
  Use a minimum value of 1.5 for line-height for main paragraph content. This will help people experiencing low vision conditions, as well as people with cognitive concerns such as Dyslexia. If the page is zoomed to increase the text size, using a unitless value ensures that the line height will scale proportionately. */
  line-height: 1.5; /*browser default is 1.4/1.5*/

  /* since we want the home page to always cover the entire height every time in every screen the user visits */
  /* if we set height to 100vh and the content inside is more than then the content overflows out of the body
  min-height allows for overflowing content inside the body */
  /* border: 1px solid red; */
  /* https://stackoverflow.com/questions/65003407/setting-height100vh-vs-min-height100vh */

  min-height: 100vh; /*all the pages are bigger in size and avoid smaller pages on the display and never allow website size to go smaller*/

  display: grid;
  /* grid stretches the content inside the fit the height and width of the container/body/screen */
  /* and equally divides/provides space between each child element */
  /* to control the space between the child elements use grid-template-rows */
  /* header just take the space for its content(min-content) and body text takes up the whole remaining space */
  grid-template-rows: min-content 1fr;
  /* when we use animation using transform-translate there are chances of oveflow happening so remove the overflow */
  overflow-x: hidden;
}

/* make images easier to work with */
:where(img, picture) {
  /* shrink images as per screen size but never allow images to grow beyond its original size */
  max-width: 100%;
  /* remove the space below image which appears since images are inline by default */
  display: block;
  /* display block is not allowing hidden attribute to work below despite using :where() which reduces the specificity to 0 */
}
/* make form elements easier to work with */
input,
button,
select,
textarea {
  /* form elements don't inherit font by default */
  font: inherit;
}

/* Remove all animations, transitions  for people that prefer not to see them
this is important for accessibility reasons because for some people animations make them feel sick and
they turn off animation in their browser/OS so remove animation from your site for those people who have chosen
to turn off animation in their website*/
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
/* that removing list bullets with `list-style: none` removes <ul/ol> semantics in VoiceOver.
Adding zero-width space fixes this; so this is yet another thing to add to our base #CSS files. #a11y  */
/* https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html
https://andy-bell.co.uk/a-modern-css-reset/ */
:where(ul[role="list"]) {
  list-style: none;
  padding: 0;
  margin: 0;
}
a {
  text-decoration: none;
}

/* in chrome user-agent source code 'hidden' attribute is implemented as below
but in some elements due to less specificity of user-agent hidden style it is not able to implement on picture
so by overriding native-user-agent-chrome source code css style by below code(since author specificity is more prioritize over usere-agent specificity
we can implement hidden attribute) */
/* the display block on img,picture(because it is in your/author css) above was overriding user-agent(chrome css) style  hidden attribute  ie hidden attribute of html
so it was not working on picture element */
/* https://github.com/twbs/bootstrap/issues/15274
https://stackoverflow.com/questions/28424906/hidden-attribute-not-working-in-bootstrap */
[hidden] {
  /* setup reset for your/author css to override user-agent css and also make hidden attribute work */
  /* in kevin's tutorial he had misspelled picture so display block was not set in his picture element */
  /* so just writing hidden attribute on html worked for kevin because his picture element didn't author display block but rather had user-agent display inline by default */
  display: none;
  /*  the more aggresive specific version */
  /* display: none !important; */
}

/* =================
    Utility Classes
===================*/
/* general styles */
.d-block {
  display: block;
}
.flex {
  display: flex;
  gap: var(--gap, 1rem);
}

/* for container flex approach
.flex.even-columns > * {
  width: 100%;
  outline: 1px solid greenyellow;
} */
.grid {
  display: grid;
  gap: var(--gap, 1rem);
}
/* andy bell's flow utility class based on lobotomized owl
for setting up spacing among the components
only add margin-top on elements after the first element
because if we are putting padding on the parent element then parent will alread give space before thefirst element anyway so no need for margin on first element*/
/* https://andy-bell.co.uk/my-favourite-3-lines-of-css/ */
/* .flow > * + * {
  margin-top: 2rem;
  outline: 1px solid red;
} */
/* * + * does not add specifity while :not() does add same specificity as of class selector so just using :not() will make it difficult to overwrite the selectors in future so use :where(:not()) which makes the specificity to 0 or use :is(:not()) is makes the specificity according to :is(id/class/type) meaning whatever selector inside is() has the highest specificity the specificity of is() will be based on that
ex. .card h1,.card h2,.card h3{}
instead use .card :where(h1,h2,h3) specicity 0
or use .card :is(h1,h2,h3) specificity = type
*/
/* check for sanitize css reset */
.flow > *:where(:not(:first-child)) {
  margin-top: var(--flow-space, 1rem);
  /* outline: 1px solid red; */
}
.flow-space {
  --flow-space: 1rem;
}

.flow--space-small {
  --flow-space: 0.75rem;
}
.container {
  padding-inline: 2em;
  max-width: 80rem;
  margin-inline: auto;
}

/*for accessibility: to visually hide the element
screen readers can read the text inside the element but visually it will be hidden
read out the element to provide context to the listeners about the element*/
.sr-only {
  /* can't use display:none to hide elements because it will take the element out of the
  DOM, this class and properties/style keeps the element inside the DOM and accessible to
  screen reader while visually hides the element */
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}
/* .skip-to-content:focus {
  position: relative;
  width: max-content;
  height: auto;
  background: white;
  color: black;
  clip-path: 0;
 } */
/* .skip-to-content {
  position: absolute;
  z-index: 9999;
  background: hsl(var(--clr-white));
  color: hsl(var(--clr-dark));
  padding: 0.5em 1em;
  margin-inline: auto;
   move 100% of its own height
  transform: translateY(-100%);
  transition: transform 0.25s ease-in;
} */
/* since .skip-to-content is child of body which has display grid with first row set to min-content and next rows to auto
.skip-to-content despite being display inline block takes up whole width due to it being child of body which is grid container
so take out the .skip-to-content from the flow of the body/page using position absolute */
.skip-to-content {
  /* take out skip-to-content from the flow of the body */
  position: absolute;
  text-decoration: underline;
  background: hsl(var(--clr-white));
  color: hsl(var(--clr-dark));
  padding: 0.5em 1em;
  /* https://stackoverflow.com/questions/9998260/css-absolute-position-wont-work-with-margin-leftauto-margin-right-auto */
  /* in order to make margin-inline auto to work we need to set up width on the element and set left 0 and right 0 for absolute position elements so position absolute takes up whole screen width and we can position element using margin-inline auto */
  left: 0;
  right: 0;
  /* 30% width of screen due left 0 and right 0 */
  /* width: 30%; */
  /* restrict the width to content size + padding only instead of taking % of screen size */
  width: max-content;
  margin-inline: auto;
  z-index: 9999;
  /* transaltey(-100%) will move the skip to content away(100% means 100% of y distance/height of skip-to-content element)  from the visible page */
  transform: translateY(-100%);
  transition: transform 0.4s ease;
}

.skip-to-content:focus {
  transform: translateY(0);
}
.box {
  background: lightblue;
  padding: 3rem;
}

.cta {
  /* changing/setting value of --gap variable for .flex/.grid from here */
  /* --gap: 5rem; */
  background: pink;
  /* border: 2px solid red; */
  padding: 2rem;
}

/* colors */
.bg-dark {
  background: hsl(var(--clr-dark));
}
.bg-accent {
  background: hsl(var(--clr-light));
}
.bg-white {
  background: hsl(var(--clr-white));
}
.text-dark {
  color: hsl(var(--clr-dark));
}
.text-accent {
  color: hsl(var(--clr-light));
}
.text-white {
  color: hsl(var(--clr-white));
}
.example-component {
  background: hsl(var(--clr-light) / 0.2);
}
#colors p > span {
  display: inline-block;
  margin-right: 3rem;
}
/* .flex > div {
  /* expanding each color box equally in the design system */
/* flex-basis/width: 100%; or instead use flex-grow:1*/
/* }  */
/* typography */

.ff-serif {
  font-family: var(--ff-serif);
}
.ff-sans-cond {
  font-family: var(--ff-sans-cond);
}
.ff-sans-normal {
  font-family: var(--ff-sans-normal);
}

.letter-spacing-1 {
  letter-spacing: 4.75px;
}
.letter-spacing-2 {
  letter-spacing: 2.7px;
}
.letter-spacing-3 {
  letter-spacing: 2.35px;
}

.uppercase {
  text-transform: uppercase;
}

.fs-900 {
  font-size: var(--fs-900);
}
.fs-800 {
  font-size: var(--fs-800);
}
.fs-700 {
  font-size: var(--fs-700);
}
.fs-600 {
  font-size: var(--fs-600);
}
.fs-500 {
  font-size: var(--fs-500);
}
.fs-400 {
  font-size: var(--fs-400);
}
.fs-300 {
  font-size: var(--fs-300);
}
.fs-200 {
  font-size: var(--fs-200);
}

/* for bigger fontt sizes the lineheight gets to large which make it look ugly so set their line height */
.fs-900,
.fs-800,
.fs-700,
.fs-600 {
  line-height: 1.1;
}

.numbered-title {
  font-family: var(--ff-sans-cond);
  font-size: var(--fs-500);
  letter-spacing: 4.72px;
  text-transform: uppercase;
}
.numbered-title > span {
  color: hsl(var(--clr-white) / 0.25);
  margin-right: 0.5em;
  font-weight: 700;
}
/* =================
    Components
===================*/
.large-button {
  /* the button's font-size is same in all the screens so hard-code the font-size */
  font-size: 2rem;
  position: relative;
  /* z-index here creates a new stacking context on the large-button and this allows to put multiple things like images/other background-colors/patterns just by manipulating different z-index on those elements
  ex. .larg-button:z-index:1, .large-button::after z-index:-1, background-image: z-index:0 will put image between large-button and large-button::after, z-index:-10 will put the image below large-button::after;
  animation/transitions/z-index creates new stacking context
  for absolute position item always create a new stacking context*/
  z-index: 1;
  /* display grid allows us to easily center the text using place-items/place-content center  */
  /* by default grid makes the outer/parent element block element so it makes the element cover the entire width of the screen
  so to not make the button take up the whole width change the display to inline-grid */
  display: inline-grid;
  /* place-content: center;
  place-items: it is a shorthand for justify-content:center and align-items center */
  place-items: center;
  padding: 0 2em;
  /* height: 300px;
  width: 300px; */
  /* instead of using height/width use modern css approach of aspect-ratio to make a perfect squaure based on padding + font-size */
  aspect-ratio: 1;
  border-radius: 50%;
  text-decoration: none;
}
.large-button::after {
  content: "";
  /* background: hsl(var(--clr-dark) / 0.2); */
  position: absolute;
  z-index: -1;
  /* top: 0;
  left: 0; */
  width: 100%;
  height: 100%;
  background: hsl(var(--clr-white) / 0.15);
  /* background: rgba(100, 100, 100, 0.15); */
  /* border-radius: 50%; */
  /* pseudo-element inherits border radius from parent element .large-button */
  border-radius: inherit;
  opacity: 0;
  /* transform: scale(1); */
  /* transition: opacity 500ms linear,
    transform 750ms cubic-bezier(0.03, 0.63, 1, 0.07); */
  transition: opacity 500ms linear, transform 750ms ease-in-out;
}
.large-button:hover::after,
.large-button:focus::after {
  opacity: 1;
  /* animation on width/height are expensive for browser because has to recalculation for repainting/reflowing for animating width and height
  transform styles like scale/translate/rotate does not cause any reflowing issue and not expensive for browser
  and they gpu-accelerated which helps in achieving smoother transitions/animation on the elements */
  transform: scale(1.5);

  /* the pseudo element animation creates blinking effect behind the button */
  /* animation: scale 500ms ease alternate both;
  animation-iteration-count: infinite; */
}
@keyframes scale {
  0% {
    transform: scale(0);
    opacity: 0;
  }
  100% {
    transform: scale(1.5);
    opacity: 1;
  }
}

/* primary-header */
.logo {
  /* doesnt' required 5vw + 1rem here becuase the layout won't be zoomed by the user  */
  /* 5vw + 1rem is required in typography because viewport units don't zoom and are fixed to the screen size  while rem units zoom when user zooms in on the text  and user generally zoom text to see better  */
  margin: 1.5rem clamp(1.5rem, 5vw, 3.5rem);
}
.primary-header {
  justify-content: space-between;
  align-items: center;
}
.primary-navigation {
  --gap: clamp(1.5rem, 5vw, 3rem);
  /* this allows to set the padding on the tabs and push the border-bottom and this variable gives more control to change the padding for different compoents by overwriting this variable in descendant classes/elements */
  --underline-gap: 0;
  list-style: none;
  padding: 0;
  margin: 0;
  /* implementing glass-morphism for navigation background */
  background: hsl(var(--clr-dark) / 0.95);
}

.primary-navigation a {
  /* position: absolute; */
  font-family: var(--ff-sans-cond);
  text-decoration: none;
  white-space: nowrap;
  /* since the navigation link was only workign when user clicked on the text and not on the surrounding space
  and inorder to make surrounding space around text also interactive and able to help user navigate to different pages
  first set the underline-gap on primary navigation to 0 and then again set underline gap here so a tag gets bigger in size and 
  border is again pushed 2rem below a tag and the other design element/styles are not affected by these changes */
  --underline-gap: 2rem;
  display: inline-block;
  padding: var(--underline-gap, 1rem) 0;
}
.primary-navigation a > span {
  margin-right: 0.5em;
  font-weight: 700;
}

@supports (backdrop-filter: blur(1.5rem)) {
  .primary-navigation {
    background: hsl(var(--clr-white) / 0.05);
    backdrop-filter: blur(1.5rem);
  }
}
.mobile-nav-toggle {
  display: none;
}
@media (max-width: 35em) {
  .primary-navigation {
    will-change: transform;
    transform: translateZ(0);
    transform: translateX(100%);
    /* animation: slide 0.5s ease; */
    /* animation-iteration-count: infinite; */
    transition: transform 0.5s ease-in-out;
  }
  /* @keyframes slide {
    from {
      transform: translateX(100%);
    }
    to {
      transform: translateX(0%);
    }
  } */
  .primary-navigation {
    /* this allows to set the padding on the tabs and push the border-bottom and this variable gives more control to change the padding for different compoents by overwriting this variable in descendant classes/elements */
    /* setting underline -gap on a tag below ie .primary-navigation a {} below 
    setting padding specifically on links in order to allow the surround space around links ie a tag to be used by the user to navigate to different pages instead of previous user had to just clikc on the text to navigate*/
    /* --underline-gap: 0.5rem; */
    flex-direction: column;
    position: fixed;
    /* top: 0;
    right: 0; */
    /* bottom: 0; */
    /* left: 30%; */

    inset: 0 0 0 30%;
    /* since the button shows on top of the navbar put the zindex to show navbar on the top of everything */

    z-index: 1000;
    padding: min(20rem, 15vh) 2rem;
    /* visibility: hidden; */
    /* will-change: transform; */
    /* https://codeburst.io/low-performance-css-transitions-and-some-alternatives-f84ff35bf07 */
    /* left: 100%; */
    /* transform: translateX(100%);
    transition: transform 0.5s ease-in-out; */
  }
  .primary-navigation a {
    /* since we are setting setting padding on links ie a tag instead of on the li tag ie underline-indicator class element
    so instead resettting underline-gap above for mobile set underline gap on here on link tag ie a tag */
    --underline-gap: 0.5rem;
  }

  /* .primary-navigation.open {
    transform: translate(0%);
  } */
  .primary-navigation[data-visible="true"] {
    /* visibility: visible; */
    /* opacity: 1; */
    transform: translateX(0%);
    /* left: 40%; */
  }
  /* .mobile-nav-toggle.open {
    background-image: url(./assets/shared/icon-close.svg);
  } */

  /* .underline-indicators is going to be used in other components as well and we have to only change the style for primary-navigation only and that too  in mobile so use more specific approach as shown below */
  .primary-navigation.underline-indicators > .active {
    border: 0;
  }
  .mobile-nav-toggle {
    display: block;
    position: absolute;
    top: 2rem;
    right: 1rem;
    z-index: 2000;
    background: transparent;
    background-image: url(./assets/shared/icon-hamburger.svg);
    background-repeat: no-repeat;
    background-position: center;
    border: 0;
    width: 1.5rem;
    aspect-ratio: 1;
    cursor: pointer;
  }
  .mobile-nav-toggle[aria-expanded="true"] {
    background-image: url(./assets/shared/icon-close.svg);
  }
  /* enable the outline when clicked on the menu button using tab key in keyboard */
  .mobile-nav-toggle:focus-visible {
    outline: 5px solid white;
    outline-offset: 5px;
  }
}
@media (min-width: 35em) {
  .primary-navigation {
    padding-inline: clamp(1rem, 5vw, 5rem);
    /* padding-inline: clamp(3rem, 7vw, 7rem); */
  }
}
@media (min-width: 35em) and (max-width: 44.999em) {
  .primary-navigation {
    padding-inline: 3rem;
  }
  .primary-navigation a > span {
    display: none;
  }
}
@media (min-width: 45em) {
  .primary-header::after {
    content: "";
    /* position relative makes the element part of the DOM
    position absollute takes the element out of the DOM flow */
    position: relative;
    display: block;
    height: 3px;
    width: 100%;
    margin-right: -2.5rem;
    z-index: 10;
    background: hsl(var(--clr-white) / 0.25);
    order: 1;
  }
  nav {
    order: 2;
  }

  .primary-navigation {
    margin-block: 2rem;
  }
}

/* .underline-indicators li */
.underline-indicators > * {
  /* using * operator to make the styling robust in order to be able to use on any other element as well */
  padding: var(--underline-gap, 1rem) 0;
  cursor: pointer;
  border: 0;
  border-bottom: 0.2rem solid hsl(var(--clr-white) / 0);
  transition: border 0.5s ease;
  /* making the tab buttons transparent as per the design to blend with the background */
  background-color: transparent;
}
/* hover seems to not work on * selector which is less specific than li(type selector) */
/* .underline-indicators > li/*:hover
.underline-indicators > li/*:focus
https://stackoverflow.com/questions/62333305/why-does-hover-pseudo-selector-on-universal-wildcard-selector-seem-to-not-apply
since design-system.html didn't had <!DOCTYPE html> and instead just had <html> before
the browsers were interpreting design-system.html as some older html and thus switched to backward/compatible "quirks mode" which emulates older
browsers to render older html instead of Modern HTML and CSS and that's why *:hover universal selector was not working here */
.underline-indicators > *:hover,
.underline-indicators > *:focus {
  border-color: hsl(var(--clr-white) / 0.25);
  /* background: red; */
}
.underline-indicators > .active,
.underline-indicators > [aria-selected="true"] {
  color: hsl(var(--clr-white) / 1);
  border-color: hsl(var(--clr-white) / 1);
}

/* one approach of inheriting all the values from the parent div to style the child buttons */
/* .btn > * { */
/* --underline-gap: 1rem; */
/* border-inline: 0;
  border-top: 0; */
/* cursor: pointer; */
/* color: inherit;
  background-color: inherit;
  text-transform: inherit;
  font-family: inherit;
  letter-spacing: inherit;
} */
.tab-list {
  --gap: 2rem;
}
/* .tab-list > * {
  background: transparent;
} */
.dot-indicators > * {
  font: inherit;
  cursor: pointer;
  border: 0;
  border-radius: 50%;
  /* width: 0.75em;
  height: 0.75em; */
  /* making a perfect square without setting width & height */
  aspect-ratio: 1/1;
  padding: 0.5em;
  background-color: hsl(var(--clr-light) / 0.25);
}
.dot-indicators > *:hover,
.dot-indicators > *:focus {
  /* border: 1px solid white; */
  /* background: hsl(var(--clr-light) / 0.5); */
  color: hsl(var(--clr-white) / 1);
}

.dot-indicators > [aria-selected="true"] {
  background: hsl(var(--clr-white) / 1);
}
.number-indicators > * {
  --flow-space: 1rem;
  font: inherit;
  /* font-size: 24px; */
  /* since we are using height no need for setting display grid to center the text because text will center as text align center is set on the grid-container/or some other parent/ancestor of number-indicators */
  /* display: grid; */
  /* place-content: center; */
  cursor: pointer;
  border: 0;
  /* line-height: 1.5; */
  border-radius: 50%;
  /* width: 0.75em;
  height: 0.75em; */
  /* making a perfect square without setting width & height */
  aspect-ratio: 1/1;
  /* width: 55px; */
  /* actually that weird issued was due to me setting flow class on numbered-indicators(flow-space pushed the other buttons down due to having margin-top on them and the first button was then stretching the whole height in chrome and in firefox it was rising up by default and when i applied align-items:flex-start only the first item was changed and rest others were pushed down due to having margin-top/flow-space on them)
   which was solved by removing the flow class and setting the space between numbered tabs using flex-gap
  the solution is in index_retry.css so there is no weird issue between chrome and firefox and we can set button height and width using em and rem units for padding and then using aspect ratio to get perfect 
  no need to set specific height on the buttons height/width can be adjusted using font-sizes and padding
  different size of number "1" was due to width of number "1" being less than other digits and this is consistent across all the browswer and no issues with that as well 
  when we set font-sizes the space alloted to fonts are the same for all the digits andletters 
  i had the issues in the morning due to my mind not being in the right place and  */
  /* there is some weird issues in chrome and firefox
  chrome: when using padding and aspect ratio chrome browser stretches the buttons by default(with or without flexbox setting)
  firefox: for number "1" the content size in layout in dev tool for both chrome and firefox shows 7.5 pixels and for other number they shouw 11.5 pixels which is the button size for number "1" is smaller than other digits buttons sizes */
  /* due to font-size issues and padding issues the buttons can't be uniformly aligned acrros chrome and firefox without hardcoding height values */
  height: clamp(3.5rem, 8vw + 1rem, 4rem);
  /* padding: 1em; */
  /* padding: 1.5rem; */
  /* padding: 1em 1em; */
  color: hsl(var(--clr-white) / 1);
  background-color: hsl(var(--clr-dark) / 0.15);
  border: 1px solid hsl(var(--clr-white) / 0.25);
}
.number-indicators > *:hover,
.number-indicators > *:focus {
  border-color: hsl(var(--clr-white) / 1);
  /* background: hsl(var(--clr-light) / 0.5); */
}

.number-indicators > [aria-selected="true"] {
  color: hsl(var(--clr-dark));
  background: hsl(var(--clr-white) / 1);
}
.number-indicators > * > span {
  pointer-events: auto;
}

/* =================
    page specific background
===================*/
body {
  /* since we are using background-size cover we can avoid using background-repeat:no-repeat
  because cover crops the image to fit the container */
  background-size: cover;
  /* for mobile we want to show planet image behind explore button */
  background-position: bottom center;
}
/* home */
.home {
  background-image: url(./assets/home/background-home-mobile.jpg);
}

@media (min-width: 35em) {
  .home {
    /* to make the text more readable in tables change the background position of the image to push it down of the text */
    background-position: center center;
    background-image: url(./assets/home/background-home-tablet.jpg);
  }
}

@media (min-width: 45em) {
  .home {
    background-image: url(./assets/home/background-home-desktop.jpg);
  }
}
/* destination */
.destination {
  background-image: url(./assets/destination/background-destination-mobile.jpg);
}

@media (min-width: 35em) {
  .destination {
    /* to make the text more readable in tables change the background position of the image to push it down of the text */
    background-position: center center;
    background-image: url(./assets/destination/background-destination-tablet.jpg);
  }
}

@media (min-width: 45em) {
  .destination {
    background-image: url(./assets/destination/background-destination-desktop.jpg);
  }
}
/* crew */
.crew {
  background-image: url(./assets/crew/background-crew-mobile.jpg);
}

@media (min-width: 35em) {
  .crew {
    /* to make the text more readable in tables change the background position of the image to push it down of the text */
    background-position: center center;
    background-image: url(./assets/crew/background-crew-tablet.jpg);
  }
}

@media (min-width: 45em) {
  .crew {
    background-image: url(./assets/crew/background-crew-desktop.jpg);
  }
}
/* technology */
.technology {
  background-image: url(./assets/technology/background-technology-mobile.jpg);
}

@media (min-width: 35em) {
  .technology {
    /* to make the text more readable in tables change the background position of the image to push it down of the text */
    background-position: center center;
    background-image: url(./assets/technology/background-technology-tablet.jpg);
  }
}

@media (min-width: 45em) {
  .technology {
    background-image: url(./assets/technology/background-technology-desktop.jpg);
  }
}

/* =================
    Layout
===================*/
.grid-container {
  /* border: 1px solid limegreen; */
  display: grid;
  text-align: center;
  /* place-items is short for align-items & justify-items together
  place-content is short for align-content & justify-content together */
  /* place-content: center;
  row-gap: 10%; */
  place-items: center;
  padding-inline: 1rem;
  /* adding padding-bottom in order create some space at the bottom
  other the content touches the bottom of the page*/
  padding-bottom: 4rem;
}
/* .grid-container * { */
/* since we only to set max-width on the contents based paragraph */
.grid-container p:not([class]) {
  max-width: 50ch;
  /* outline: 2px solid limegreen; */
}

/* .flex-container {
  border: 1px solid red;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
}
.flex-container > * {
  flex-basis: 40%;
} */
/* since the title remain same for all the tabs which is what we are going to use for each tab grid-template-areas */
/* numbered-title is generic utititly grid-area going to be used in multiple different pages */
.numbered-title {
  grid-area: title;
}
/* destination layout
all the layout style specific to destination page*/
.grid-container--destination {
  /* control flow space from here */
  --flow-space: 2rem;
  grid-template-areas:
    "title"
    "image"
    "tabs"
    "content";
}
.grid-container--destination > picture {
  grid-area: image;
  max-width: 60%;
  /* grid items are stretched by default in cross/align axis */
  /* so to push the image on the top of the grid instead of stretching whole cell cell use align -self start */
  /* this is not needed because i have already set align-content start in mediaquery 45em grid-container destination class */
  align-self: start;
}
.grid-container--destination > .tab-list {
  grid-area: tabs;
}
.grid-container--destination > .destination-info {
  grid-area: content;
}
.destination-meta {
  flex-direction: column;
  border-top: 1px solid hsl(var(--clr-white) / 0.1);
  padding-top: 2.5rem;
  margin-top: 2.5rem;
  /* all the children in the destination-meta inherit text-align center from the grid-container
  but the contents inside destination meta are not centrally aligned as per the detaination meta container
  so align-items center solve that issue
  also destination-meta max-width is 50ch set in .grid-container * due to which its width was not matching the grid-container cell width due to which the
  text-align center was not aligning perfectly with the heading text above it solving that issue using align-items center here */
  /* align-items: center; */
}
.destination-meta p {
  /* font-sizes for all screen is the same for the paragraph */
  font-size: 1.75rem;
}

/* crew layout */
.grid-container--crew {
  grid-template-areas:
    "title"
    "image"
    "dot-list"
    "content";
}
.grid-container--crew > picture {
  max-width: 60%;
  grid-area: image;
  border-bottom: 1px solid hsl(var(--clr-white) / 0.1);
}
.grid-container--crew > .dot-indicators {
  grid-area: dot-list;
}
.grid-container--crew > .crew-details {
  grid-area: content;
}
.crew-details h2 {
  /* opacity: 0.5; */
  color: hsl(var(--clr-white) / 0.5);
}

/* technology layout */
.grid-container--technology {
  --flow-space: 2rem;
  /* since we want the image to stretch the whole screen width first make padding inline 0 and then simulate padding using grid template columns */
  padding-inline: 0;
  align-content: start;
  /* grid-template-rows: min-content; */
  /* since we are making padding inline to 0 in grid-container technology we need to simulate padding inline in the grid-container-technology using grid-template-columsn 1rem auto 1rem to accomodate space to avoid contents touching the edge of the screen
  unless it is an image which we want it to stretch the whole screen width so we can span the whole image using grid-template areas */
  /* using grid-template-columns and grid-template area we can stretch the image across tablets and mobile devices easily */
  grid-template-columns: 1rem auto 1rem;
  grid-template-areas:
    ". title ."
    "image image image "
    ". tab ."
    ". content .";
  /* border: 5px solid blanchedalmond; */
}
.grid-container--technology > picture {
  /* position: relative;
  left: 0; */
  /* right: -1rem; */
  /* top: 0;
  bottom: 0; */
  /* margin-right: -2rem;
  margin-left: -4rem; */
  /* width: auto; */
  /* we can stretch image using scale but on smaller screen we need to adjust scale value which makes the solution not so robust and applicable for different screens  */
  /* transform: scale(110%); */
  /* grid-column: 1 / span 3; */
  grid-area: image;
  /* margin-left: -20%;
  margin-right: -20%; */
  /* outline: 2px solid lime; */
}
/* https://stackoverflow.com/questions/27853884/media-queries-and-image-swapping */
.grid-container--technology > picture > .image-portrait {
  display: none;
  /* transform: translate(500%); */
}
.grid-container--technology > .number-indicators {
  grid-area: tab;
  --gap: 2rem;
  /* width: 100%; */
  /* height: min-content; */
  /* padding-block: 1rem; */
  /* border: 2px solid red; */
  /* align-items: stretch; */
  /* align-content: center; */
  /* justify-self: start; */
  /* align-self: end; */
}

/* .number-indicators > * { */
/* align-self: flex-start;
  justify-self: flex-start; */
/* aspect-ratio: 1; */
/* display: grid;
  place-content: center; */
/* } */
.grid-container--technology > .technology-info {
  grid-area: content;
  /* apparently putting flow-space here will change the flow-space for article technology info in its parent ie main container instead of  */
  /* since we  are putting .flow class in main and also in article and also in header tab below article tag */
  /* putting flow-space here change flow-space value for article tag as well as the children of article tag */
  /* --flow-space: 1rem; */
}
.technology-info > header {
  /* display: flex;
  flex-direction: column;
  justify-content: flex-start; */
  /* outline: 2px solid red; */
  /* in design for mobile screen the text align is left for content inside header */
  /* .technology-info header stretches whole screen width by default so first reduce the stretch by setting display to inline-block and then internally align text to left in order to scope the text align left to locally within header tag */
  display: inline-block;
  text-align: left;
}
.technology-info > header > h2 {
  /* --flow-space: 0.5rem; */
  font-size: var(--fs-400);
}
.technology-info > p {
  /* changing flow space value  here to only change the flow space value of paragraph tag inside article .technology info container */
  --flow-space: 1rem;
  color: hsl(var(--clr-light));
}

.technology-info > header p {
  font-size: var(--fs-600);
}
@media (min-width: 35em) {
  /* .grid-container--destination > .numbered-title,
  .grid-container--crew > .numbered-title { */
  /* .numbered-title style is repeated for multiple layouts so no need to add more specificity to it */
  .numbered-title {
    /* text-align: left; */
    /* place-self: left; */
    /* border: 1px solid red; */
    /* setting justify self start automattically sets the title to the left for all the pages that use numbered title */
    justify-self: start;
    /* another way to text align left*/
    /* display: block;
    margin-right: auto; */
    /* in design there is more space above title in medium and large screen */
    margin-block-start: 2rem;
  }
  .destination-meta {
    flex-direction: row;
    /* text-align: left; */
    justify-content: space-evenly;
  }

  /* .grid-container {
    padding-bottom: 0;
  } */
  .grid-container--crew {
    /* since gric-container-crew is a modification to the grid-container and due to it being cascading ie coming after grid-container
    so applying/modifying padding-bottom here will override grid-container padding bottom */
    padding-bottom: 0;
    grid-template-areas:
      "title"
      "content"
      "dot-list"
      "image";
  }
  /* .grid-container--crew > picture { */
  /* in order to make the image stuck to the bottom of the screen and since the grid-container extend till the bottom of the screen
    using align-self end will push the image to the bottom */
  /* align-self: end; */
  /* } */

  /* .grid-container--crew > .numbered-title {
    justify-self: start;
    margin-top: 2rem;
  } */
  .technology-info > header {
    text-align: center;
  }

  .technology-info > header > h2 {
    /* --flow-space: 0.5rem; */
    font-size: var(--fs-200);
  }
}

/* around 45rem tablets get maxed out and so move into desktop layout post 45rem */
@media (min-width: 45em) {
  .grid-container {
    text-align: left;
    column-gap: var(--container-gap, 2rem);
    grid-template-columns: minmax(2rem, 1fr) repeat(2, minmax(0, 30rem)) minmax(
        2rem,
        1fr
      );
  }

  /* .grid-container--home > *:first-child  this caused the numbered title in the destination page to span across two columns
  this child configuration is only specifically needed for home page */
  .grid-container--home > *:first-child {
    grid-column: 2;
    padding: 0;
    /* outline: 1px solid red; */
  }
  .grid-container--home > *:last-child {
    grid-column: 3;
    justify-self: end;
    /* outline: 1px solid yellow; */
  }
  .grid-container--home {
    align-items: end;
    /* dynamically change bottom padding on large screen sizes and setting min padding to 6rem */
    padding-bottom: max(6rem, 10vh);
  }
  /* .flex-container {
    flex-direction: row;
  } */
  .grid-container--destination {
    justify-items: start;
    /* for taller screens (simulate taller screen by making desktop size 50% in chrome responsive mode)
    due to place-items:center style set in grid-container the all the element/children of grid-container are placed
    in the center of their respective cell spaces
    so for taller screen use align-content start to place all the content inside each cell of the grid-container
    to display/arrange them on the top of the cell instead expanding giving all the extra spaces inside each cell due to place-items center` */
    align-content: start;
    grid-template-areas:
    /* since in the grid-container we are having flexible spaces before and after content using minmax()
    in order to accomodate those space use '.' in our grid-template areas */
      ". title title . "
      ". image tabs ."
      ". image content .";
  }
  /* .tab-list {
    since we are putting justify items left on the grid-container--destinatino so no need for this
    margin-right: auto;
  } */
  .destination-meta {
    --gap: min(6vw, 6rem);
    /* outline: 2px solid red; */
    justify-content: flex-start;
  }
  .grid-container--destination > picture,
  .grid-container--crew > picture {
    max-width: 100%;
  }
  /* .destination-meta > * { */
  /* the heading was wrapping on small screen-sizes so to remove wrapping use below style */
  /* white-space: nowrap; */
  /* since we are setting gap using min() in .destaination-meta so no need for nowrap here */
  /* } */

  .grid-container--crew {
    grid-template-columns: minmax(1rem, 1fr) minmax(0, 37rem) minmax(0, 23rem) minmax(
        1rem,
        1fr
      );

    /* align-content: end; */
    /* align all the text to start on the left in main axis of the cell using justify items start */
    justify-items: start;
    /* place-items: start; */
    grid-template-areas:
      ". title image ."
      ". content image ."
      ". dot-list image .";
  }
  /* .grid-container--crew > .dot-indicators {
    justify-self: start;
  } */
  .grid-container--crew > picture {
    /* push the image to span till the last column and extend the size of the cell */
    /* it spans the minmax(2rem,1fr) column as well */

    grid-column: span 2;
    /* push image to the bottom */
    align-self: end;
    max-width: 90%;
  }

  .grid-container--technology {
    grid-template-rows: min-content auto;
    grid-template-columns:
      minmax(2rem, 1fr) minmax(0, 5rem) minmax(0, 29rem) minmax(0, 15rem)
      minmax(2rem, 1fr);
    grid-template-areas:
      ". title title title ."
      ". tab content image .";
  }
  .grid-container--technology > .number-indicators {
    flex-direction: column;
  }
  .grid-container--technology > picture {
    grid-column: span 2;
    aspect-ratio: 1/1;
    /* since we are spaning the picture cell across last 2columns to allow for more width size for picture
    we need to push the image to left edge of the screen as per design so always keep the image to left edge of grid cell using justify self end */
    justify-self: end;
  }
  /* https://stackoverflow.com/questions/27853884/media-queries-and-image-swapping */
  .grid-container--technology > picture > .image-portrait {
    display: block;
  }
  .grid-container--technology > picture > .image-landscape {
    display: none;
  }
  .technology-info > header {
    text-align: left;
  }
}
