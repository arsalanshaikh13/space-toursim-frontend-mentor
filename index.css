/* ================= 
    Custom Properties
===================*/
:root {
  /* colors */
  --clr-dark: 230 35% 7%;
  --clr-light: 231 77% 90%;
  --clr-white: 0 0% 100%;

  /* font-sizes */
  /* px values overwrites the default settings of the browsers
  and if the user has changed their default settings for font-sizes intheir
  browsers then px will values will overwrite them and make the site appear different
  than it should be
  rem works on the default browser font-size settings so it won't overwrite
  default/changed browser settings nd make the site appear as designed
  with things appearing big/small as they were designed in predictable ways */
  --fs-900: 9.875rem;
  --fs-800: 6.25rem;
  --fs-700: 3.5rem;
  --fs-600: 2rem;
  --fs-500: 1.75rem;
  --fs-400: 1.125rem;
  --fs-300: 1rem;
  --fs-200: 0.875rem;

  /* font-families */
  --ff-serif: "Bellefair", serif;
  --ff-sans-cond: "Barlow Condensed", sans-serif;
  --ff-sans-normal: "Barlow", sans-serif;
}

/* ================= 
    Resets
===================*/

/* https://andy-bell.co.uk/a-modern-css-reset/ - Andy Bell's Reset(inspiration for reset) */
/* box-sizing */
*,
*::before,
*::after {
  box-sizing: border-box;
}
/* margin reset */
body,
h1,
h2,
h3,
h4,
h5,
p,
figure,
picture,
ul {
  margin: 0;
}
h1,
h2,
h3,
h4,
h5,
h6,
p {
  /* since we have only imported 400-regular font-weight from google
  so put that on each heading/paragraph as design requires */
  font-weight: 400;
}

/* set up the body */
body {
  font-family: var(--ff-sans-normal);
  font-size: var(--fs-400);
  color: hsl(var(--clr-white));
  background: hsl(var(--clr-dark));
  line-height: 1.5; /*browser default is 1.4/1.5*/
  min-height: 100vh; /*all the pages are bigger in size and avoid smaller pages on the display and never allow website size to go smaller*/
}

/* make images easier to work with */
img,
picture {
  /* shrink images as per screen size but never allow images to grow beyond its original size */
  max-width: 100%;
  /* remove the space below image which appears since images are inline by default */
  display: block;
}
/* make form elements easier to work with */
input,
button,
select,
textarea {
  /* form elements don't inherit font by default */
  font: inherit;
}

/* Remove all animations, transitions  for people that prefer not to see them 
this is important for accessibility reasons because for some people animations make them feel sick and 
they turn off animation in their browser/OS so remove animation from your site for those people who have chosen
to turn off animation in their website*/
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* ================= 
    Utility Classes
===================*/
/* general styles */
.flex {
  display: flex;
  gap: var(--gap, 1rem);
}
.grid {
  display: grid;
  gap: var(--gap, 1rem);
}
/* andy bell's flow utility class based on lobotomized owl
for setting up spacing among the components 
only add margin-top on elements after the first element
because if we are putting padding on the parent element then parent will alread give space before thefirst element anyway so no need for margin on first element*/
/* https://andy-bell.co.uk/my-favourite-3-lines-of-css/ */
/* .flow > * + * {
  margin-top: 2rem;
  outline: 1px solid red;
} */
/* * + * does not add specifity while :not() does add same specificity as of class selector so just using :not() will make it difficult to overwrite the selectors in future so use :where(:not()) which makes the specificity to 0 or use :is(:not()) is makes the specificity according to :is(id/class/type) meaning whatever selector inside is() has the highest specificity the specificity of is() will be based on that
ex. .card h1,.card h2,.card h3{}
instead use .card :where(h1,h2,h3) specicity 0
or use .card :is(h1,h2,h3) specificity = type 
*/
/* check for sanitize css reset */
.flow > *:where(:not(:first-child)) {
  margin-top: var(--flow-space, 1rem);
  /* outline: 1px solid red; */
}
.flow-space {
  --flow-space: 1rem;
}
.container {
  padding-inline: 2em;
  max-width: 80rem;
  margin-inline: auto;
}

/*for accessibility: to visually hide the element
screen readers can read the text inside the element but visually it will be hidden
read out the element to provide context to the listeners about the element*/
.sr-only {
  /* can't use display:none to hide elements because it will take the element out of the 
  DOM, this class and properties/style keeps the element inside the DOM and accessible to 
  screen reader while visually hides the element */
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

.box {
  background: lightblue;
  padding: 3rem;
}

.cta {
  /* changing/setting value of --gap variable for .flex/.grid from here */
  /* --gap: 5rem; */
  background: pink;
  border: 2px solid red;
  padding: 2rem;
}

/* colors */
.bg-dark {
  background: hsl(var(--clr-dark));
}
.bg-accent {
  background: hsl(var(--clr-light));
}
.bg-white {
  background: hsl(var(--clr-white));
}
.text-dark {
  color: hsl(var(--clr-dark));
}
.text-accent {
  color: hsl(var(--clr-light));
}
.text-white {
  color: hsl(var(--clr-white));
}
.example-component {
  background: hsl(var(--clr-light) / 0.2);
}
#colors p > span {
  display: inline-block;
  margin-right: 3rem;
}
/* .flex > div {
  /* expanding each color box equally in the design system */
/* flex-basis/width: 100%; or instead use flex-grow:1*/
/* }  */
/* typography */

.ff-serif {
  font-family: var(--ff-serif);
}
.ff-sans-cond {
  font-family: var(--ff-sans-cond);
}
.ff-sans-normal {
  font-family: var(--ff-sans-normal);
}

.letter-spacing-1 {
  letter-spacing: 4.75px;
}
.letter-spacing-2 {
  letter-spacing: 2.7px;
}
.letter-spacing-3 {
  letter-spacing: 2.35px;
}

.uppercase {
  text-transform: uppercase;
}

.fs-900 {
  font-size: var(--fs-900);
}
.fs-800 {
  font-size: var(--fs-800);
}
.fs-700 {
  font-size: var(--fs-700);
}
.fs-600 {
  font-size: var(--fs-600);
}
.fs-500 {
  font-size: var(--fs-500);
}
.fs-400 {
  font-size: var(--fs-400);
}
.fs-300 {
  font-size: var(--fs-300);
}
.fs-200 {
  font-size: var(--fs-200);
}

/* for bigger fontt sizes the lineheight gets to large which make it look ugly so set their line height */
.fs-900,
.fs-800,
.fs-700,
.fs-600 {
  line-height: 1.1;
}

.numbered-title {
  font-family: var(--ff-sans-cond);
  font-size: var(--fs-500);
  letter-spacing: 4.72px;
  text-transform: uppercase;
}
.numbered-title > span {
  color: hsl(var(--clr-white) / 0.25);
  margin-right: 0.5em;
  font-weight: 700;
}
/* ================= 
    Components
===================*/
.large-button {
  position: relative;
  /* z-index here creates a new stacking context on the large-button and this allows to put multiple things like images/other background-colors/patterns just by manipulating different z-index on those elements
  ex. .larg-button:z-index:1, .large-button::after z-index:-1, background-image: z-index:0 will put image between large-button and large-button::after, z-index:-10 will put the image below large-button::after; 
  animation/transitions/z-index creates new stacking context
  for absolute position item always create a new stacking context*/
  z-index: 1;
  /* display grid allows us to easily center the text using place-items/place-content center  */
  display: grid;
  /* place-content: center;
  place-items: it is a shorthand for justify-content:center and align-items center */
  place-items: center;
  padding: 0 2em;
  /* height: 300px;
  width: 300px; */
  /* instead of using height/width use modern css approach of aspect-ratio to make a perfect squaure based on padding + font-size */
  aspect-ratio: 1;
  border-radius: 50%;
  text-decoration: none;
}
.large-button::after {
  content: "";
  /* background: hsl(var(--clr-dark) / 0.2); */
  position: absolute;
  z-index: -1;
  /* top: 0;
  left: 0; */
  width: 100%;
  height: 100%;
  background: hsl(var(--clr-white) / 0.15);
  /* background: rgba(100, 100, 100, 0.15); */
  /* border-radius: 50%; */
  /* pseudo-element inherits border radius from parent element .large-button */
  border-radius: inherit;
  opacity: 0;
  /* transition: opacity 500ms linear,
    transform 750ms cubic-bezier(0.03, 0.63, 1, 0.07); */
  transition: opacity 500ms linear, transform 750ms ease-in-out;
}
.large-button:hover::after,
.large-button:focus::after {
  opacity: 1;
  /* animation on width/height are expensive for browser because has to recalculation for repainting/reflowing for animating width and height 
  transform styles like scale/translate/rotate does not cause any reflowing issue and not expensive for browser
  and they gpu-accelerated which helps in achieving smoother transitions/animation on the elements */
  transform: scale(1.5);
}

.primary-navigation {
  --gap: 8rem;
  /* this allows to set the padding on the tabs and push the border-bottom and this variable gives more control to change the padding for different compoents by overwriting this variable in descendant classes/elements */
  --underline-gap: 2rem;
  list-style: none;
  padding: 0;
  margin: 0;
}

.primary-navigation a {
  font-family: var(--ff-sans-cond);
  text-decoration: none;
}
.primary-navigation a > span {
  margin-right: 0.5em;
  font-weight: 700;
}
/* .underline-indicators li */
.underline-indicators > * {
  /* using * operator to make the styling robust in order to be able to use on any other element as well */
  padding: var(--underline-gap, 1rem) 0;
  cursor: pointer;
  border: 0;
  border-bottom: 0.2rem solid hsl(var(--clr-white) / 0);
  transition: border 0.5s ease;
}
/* hover seems to not work on * selector which is less specific than li(type selector) */
/* .underline-indicators > li/*:hover
.underline-indicators > li/*:focus
https://stackoverflow.com/questions/62333305/why-does-hover-pseudo-selector-on-universal-wildcard-selector-seem-to-not-apply
since design-system.html didn't had <!DOCTYPE html> and instead just had <html> before
the browsers were interpreting design-system.html as some older html and thus switched to backward/compatible "quirks mode" which emulates older
browsers to render older html instead of Modern HTML and CSS and that's why *:hover universal selector was not working here */
.underline-indicators > *:hover,
.underline-indicators > *:focus {
  border-color: hsl(var(--clr-white) / 0.25);
  /* background: red; */
}
.underline-indicators > .active,
.underline-indicators > [aria-selected="true"] {
  color: hsl(var(--clr-white) / 1);
  border-color: hsl(var(--clr-white) / 1);
}

/* one approach of inheriting all the values from the parent div to style the child buttons */
/* .btn > * { */
/* --underline-gap: 1rem; */
/* border-inline: 0;
  border-top: 0; */
/* cursor: pointer; */
/* color: inherit;
  background-color: inherit;
  text-transform: inherit;
  font-family: inherit;
  letter-spacing: inherit;
} */
.tab-list {
  --gap: 2rem;
}
.dot-indicators > * {
  font: inherit;
  cursor: pointer;
  border: 0;
  border-radius: 50%;
  /* width: 0.75em;
  height: 0.75em; */
  /* making a perfect square without setting width & height */
  aspect-ratio: 1/1;
  padding: 0.5em;
  background-color: hsl(var(--clr-light) / 0.25);
}
.dot-indicators > *:hover,
.dot-indicators > *:focus {
  border: 1px solid white;
  /* background: hsl(var(--clr-light) / 0.5); */
  color: hsl(var(--clr-white) / 1);
}

.dot-indicators > [aria-selected="true"] {
  background: hsl(var(--clr-white) / 1);
}
.number-indicators > * {
  --flow-space: 1rem;
  font: inherit;
  display: grid;
  place-content: center;
  cursor: pointer;
  border: 0;
  border-radius: 50%;
  /* width: 0.75em;
  height: 0.75em; */
  /* making a perfect square without setting width & height */
  aspect-ratio: 1/1;
  padding: 1em;
  color: hsl(var(--clr-white) / 1);
  background-color: hsl(var(--clr-dark) / 0.15);
  border: 1px solid hsl(var(--clr-white) / 0.25);
}
.number-indicators > *:hover,
.number-indicators > *:focus {
  border-color: hsl(var(--clr-white) / 1);
  /* background: hsl(var(--clr-light) / 0.5); */
}

.number-indicators > [aria-selected="true"] {
  color: hsl(var(--clr-dark));
  background: hsl(var(--clr-white) / 1);
}
